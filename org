#!/bin/sh
exec scala -savecompiled "$0" "$@"
!#

val usage = """
  |Usage:
  |  org add member [id]
  |  org update member [id] [field] [value]
  |  org update member [id] [field] add|remove [value] #For multi-value fields
  |  org remove member [id]
""".stripMargin

def error(message: String): Unit = {
  Console.err.println(message)
  System.exit(1)
}

args.toList match {
  case "add" :: "member" :: id :: Nil =>
    addMember(id)
  case "update" :: "member" :: id :: field :: value :: Nil =>
    updateMember(id, field, value)
  case "update" :: "member" :: id :: field :: action :: value :: Nil =>
    updateMember(id, field, action, value)
  case "remove" :: "member" :: id :: Nil =>
    removeMember(id)
  case _ =>
    error(usage)
} 

type Line = Seq[String]

case class Csv(header: Line, entries: Seq[Line])

object CsvParser {
  def parse(filename: String): Csv = {
    val lines = io.Source.fromFile(filename).getLines()

    if (lines.hasNext) {
      val header = parseLine(lines.next())
      val entries = lines.map { parseLine }.toSeq
      Csv(header, entries)
    } else {
      sys.error(s"File $filename is missing a header")
    }
  }

  private def parseLine(line: String): Seq[String] = line.split(",").map(_.trim)
}

def addMember(id: String) = {
  println(s"Adding member $id")
  val membersCsv = CsvParser.parse("members.csv")
}

def updateMember(id: String, field: String, value: String) = {
  println(s"Updating member $id: field $field -> $value")
}

def updateMember(id: String, field: String, action: String, value: String) = {
  println(s"Updating member $id: multi-value field $field -> $value")
}

def removeMember(id: String) = {
  println(s"Removing member $id")
}


